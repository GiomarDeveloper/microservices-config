server:
  port: 8082

spring:
  application:
    name: account-service
  
  data:
    mongodb:
      uri: mongodb://localhost:27017/db_account
      
  # CONFIGURACIÓN KAFKA - AGREGAR ESTO
  kafka:
    bootstrap-servers: localhost:29093  # o localhost:29093 si usas Docker
    consumer:
      group-id: account-service
      auto-offset-reset: earliest
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      properties:
        security.protocol: PLAINTEXT
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.apache.kafka.common.serialization.StringSerializer
      properties:
        spring.json.add.type.headers: false
app:
  kafka:
    topics:
      balance-validation-request: balance-validation-request
      balance-validation-response: balance-validation-response
      account-inquiry-request: account-inquiry-request
      account-inquiry-response: account-inquiry-response

external:
  services:
    customer:
      url: http://localhost:8081
    credit:
      url: http://localhost:8083

logging:
  level:
    root: INFO
    com.bank.account: DEBUG
    org.springframework.kafka: DEBUG
    
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,env,beans
      base-path: /actuator
  endpoint:
    health:
      show-details: always
      show-components: always
    info:
      enabled: true
  info:
    env:
      enabled: true
    build:
      enabled: true

info:
  app:
    name: ${spring.application.name}
    version: 1.0
    description: Microservice for bank account management
    
# Configuración de Eureka
eureka:
  client:
    register-with-eureka: true
    fetch-registry: true
    service-url:
      defaultZone: http://localhost:8761/eureka
  instance:
    prefer-ip-address: false
    hostname: localhost
    instance-id: ${spring.application.name}:${server.port}